import 'package:dio/dio.dart';

import 'package:flutter_secure_storage/flutter_secure_storage.dart';

final dio = Dio();
String? errorMessage;
// With default Options.

Dio axios() {
  const storage = FlutterSecureStorage();
  // dio.options.baseUrl = "http://10.0.2.2:8000/api/";

// dio.options.baseUrl = 'http://192.168.249.63:8000/api';
 
  dio.options.connectTimeout = const Duration(seconds: 60);
  dio.options.receiveTimeout = const Duration(seconds: 60);
  dio.options.headers['accept'] = 'Application/Json';
  dio.interceptors.add(
    InterceptorsWrapper(
      onRequest:
          (RequestOptions options, RequestInterceptorHandler handler) async {
        final token = await storage.read(key: 'token');
        options.headers['Authorization'] = 'Bearer $token';
        return handler.next(options);
      },
      onResponse: (Response response, ResponseInterceptorHandler handler) {
        return handler.next(response);
      },
      onError: (DioException e, ErrorInterceptorHandler handler) {
        String errorMessage;
        switch (e.type) {
          case DioExceptionType.badResponse:
          // errorMessage = 'Bad request';
            if (e.response!.statusCode! >= 400 && e.response!.statusCode! < 500) {
              errorMessage = e.response!.data['message']??'Bad request or Unauthorized';
            }
            // else if (e.response?.statusCode == 400) {
            //   errorMessage = 'Bad request';
            // }
            
            //  else if (e.response?.statusCode == 405) {
            //   errorMessage = 'Forbidden';
            // } 
            // else if (e.response?.statusCode == 500) {
            //   errorMessage = e.response!.data['message']??'Something went wrong';
            // } else if (e.response?.statusCode == 501) {
            //   errorMessage = "Service Unavailable:";
            // }
            else {
              errorMessage = 'Something went wrong';
            }
            break;
          case DioExceptionType.connectionTimeout:
            errorMessage = 'Connection Timeout';
            break;
          case DioExceptionType.receiveTimeout:
            errorMessage = 'Unable to receive from the server';
            break;
          case DioExceptionType.sendTimeout:
            errorMessage = 'Please check your internet connection';
            break;
          case DioExceptionType.unknown:
              errorMessage = 'Something went wrong';
            break;
          default:
            errorMessage = 'An error occurred';
            break;
        }

        // Create a new DioError instance with the custom message
        DioException customError = DioException(
            requestOptions: e.requestOptions,
            response: e.response,
            type: e.type,
            error: errorMessage,
            message: e.message);
        return handler.next(customError);
      },
    ),
  );

  return dio;
}










// class PostController {
//   final Dio _dio = Dio();
//   final FlutterSecureStorage _secureStorage = FlutterSecureStorage();

//   // API endpoint URLs
//   final String registerUrl = 'https://yourapi.com/register';
//   final String loginUrl = 'https://yourapi.com/login';

//   // Method for registration
//   Future<void> register(Map<String, dynamic> data) async {
//     try {
//       final response = await _dio.post(registerUrl, data: data);
//       // Save token to secure storage if successful
//       if (response.statusCode == 200) {
//         await _secureStorage.write(key: 'token', value: response.data['token']);
//         print('Registration successful');
//       }
//     } catch (e) {
//       print('Registration failed: $e');
//     }
//   }

//   // Method for login
//   Future<void> login(Map<String, dynamic> data) async {
//     try {
//       final response = await _dio.post(loginUrl, data: data);
//       if (response.statusCode == 200) {
//         await _secureStorage.write(key: 'token', value: response.data['token']);
//         print('Login successful');
//       }
//     } catch (e) {
//       print('Login failed: $e');
//     }
//   }

//   // Retrieve token (for subsequent API calls)
//   Future<String?> getToken() async {
//     return await _secureStorage.read(key: 'token');
//   }
// }




